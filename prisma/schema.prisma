// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider  = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @unique
  sb_auth_id              String        @db.Uuid @unique
  email                   String        @db.VarChar(255) @unique
  first_name              String        @db.VarChar(255)
  last_name               String        @db.VarChar(255)
  dial_code               String        @db.VarChar(10)
  phone                   String        @db.VarChar(50)
  company                 Json?
  role                    Role          @relation(fields: [role_id], references: [id])
  role_id                 String        @db.Uuid
  invites_sent            Invite[]      @relation("sender_to_receiver")
  invites_received        Invite[]      @relation("receiver_to_invite")
  machines                Machine[]     @relation("machine_registrar")
  machines_dealership     Machine[]     @relation("machine_dealership")
  machines_farm_manager   Machine[]     @relation("machine_farm_manager")
  created_at              DateTime      @default(now())
  updated_at              DateTime      @updatedAt @default(now())
  deleted_at              DateTime?

  @@map("profiles")
}

model Invite {
  id                String          @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  sender            User            @relation("sender_to_receiver", fields: [sender_id], references: [sb_auth_id])
  sender_id         String          @db.Uuid
  receiver          User            @relation("receiver_to_invite", fields: [receiver_id], references: [sb_auth_id])
  receiver_id       String          @db.Uuid
  is_accepted       Boolean         @default(false)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt @default(now())

  @@map("invites")
}

model Role {
  id                  String          @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  name                String          @unique
  descr               String?
  alias               String          @unique @db.VarChar(255)
  users               User[]
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt @default(now())
  deleted_at          DateTime?

  @@map("roles")
}

model MachineType {
  id                String          @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  name              String          @db.VarChar(255)
  alias             String          @db.VarChar(255)
  machines          Machine[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt @default(now())

  @@map("machine_types")
}

model Machine {
  id                String          @id @default(dbgenerated("uuid_generate_v4()"))
  serial_no         String          @db.VarChar(255) @unique
  model_no          String          @db.VarChar(255)
  prod_date         DateTime
  type              MachineType     @relation(fields: [type_id], references: [id], onDelete: Cascade)
  type_id           String          @db.Uuid
  registrar         User            @relation("machine_registrar", fields: [registrar_id], references: [sb_auth_id], onDelete: Cascade)
  registrar_id      String          @db.Uuid
  dealership        User?           @relation("machine_dealership", fields: [dealership_id], references: [sb_auth_id], onDelete: Cascade)
  dealership_id     String?         @db.Uuid
  farm_manager      User?           @relation("machine_farm_manager", fields: [farm_manager_id], references: [sb_auth_id], onDelete: Cascade)
  farm_manager_id   String?         @db.Uuid
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt @default(now())
  deleted_at        DateTime?


  @@map("machines")
}

// Relations
// 1. A user can send an invitation to many invitees, and the invitees are invited by the user. 
// 2. A user can have only one role.
// 3. A user can have many machines and many machines can belong to one user (many-to-many relation).
// 4. A machine can have only one machine type.